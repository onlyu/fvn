#!/usr/bin/perl

use strict;
use Data::Dumper;
use Storable;
use Digest::MD5;

# file = ( md5=>xxx, action=[none|add|del|change] )
my %fvn_config = (
    version_server => 0,
    version_local => 0,
    usr => "",
    pwd => "",
    root => "",
    files => {},
    );

fvn_load_config(".config");
if($ARGV[0] eq "add"){
    fvn_add($ARGV[1]);
}elsif($ARGV[0] eq "del"){
    fvn_del($ARGV[1]);
}elsif($ARGV[0] eq "commit"){
    fvn_commit();
}elsif($ARGV[0] eq "push"){
    fvn_push();
}elsif($ARGV[0] eq "pull"){
    fvn_pull();
}elsif($ARGV[0] eq "set"){
    fvn_set($ARGV[1]);
}elsif($ARGV[0] eq "sync"){
    fvn_sync($ARGV[1]);
}else{
    usage();
}
fvn_save_config(".config");

sub fvn_load_config
{
    my ($file_name) = @_;
    open(CONFIG_FILE, "<$file_name") or return;
    close(CONFIG_FILE);
    
    %fvn_config = %{retrieve $file_name};
}

sub fvn_save_config
{
    my ($file_name) = @_;
    store \%fvn_config,$file_name;
}

sub usage
{
    print "usage:\n";
    print "fvn add file\n";
    print "fvn del file\n";
    print "fvn commit\n";
    print "fvn push\n";
    print "fvn pull\n";
    print "fvn set usr=xx|pwd=xxx|root=xxx\n";
    exit(-1);
}

sub fvn_add
{
    my ($file_name) = @_;
    if(defined($fvn_config{"files"}->{$file_name})){
	die "file $file_name is in fvn allready!!!\n";
    }

    unless( -e $file_name ){
	die "file $file_name not exist!!!\n";
    }

    # as for dir, add all files to the fvn repository
    if(-f $file_name){
	my $ctx = Digest::MD5->new;
	open(FILE, "<$file_name");
	$ctx->addfile(*FILE);
	close(FILE);

	$fvn_config{"files"}->{$file_name} = {
	    md5=>$ctx->hexdigest,
	    action=>"add",
	};
	print "add file $file_name success\n";
    }else{
	opendir(DIR, $file_name) or "die can not open dir $file_name";
	my @names = readdir(DIR);
	closedir(DIR);
	for my $name (@names){
	    if($name eq "."){ next;}
	    if($name eq ".."){ next;}
	    fvn_add($file_name.'/'.$name);
	}
    }
    
}

sub fvn_del
{
    my ($filename) = @_;
    unless( defined($fvn_config{"files"}->{$filename})){
	die "file not in fvn:$filename\n";
    }
    
    $fvn_config{"files"}->{$filename}->{"action"} = "del";
    print "del file $filename success\n";
}

sub fvn_set
{
    my($str) = @_;
    my ($key,$value) = split '=', $str;
    $fvn_config{$key} = $value;
    print "set $key to $value\n";
}

sub fvn_commit
{
    my $change = 0;
    my $add = 0;
    my $del = 0;
    my $unchange = 0;
    my %files = %{$fvn_config{"files"}};
    foreach my $file (keys %files){
	my $ctx = Digest::MD5->new;
	open(FILE, "<$file");
	$ctx->addfile(*FILE);
	close(FILE);

	my $digest = $ctx->hexdigest;

	my %file_info = %{$fvn_config{"files"}->{$file}};
	#print "$digest === ",$file_info{"md5"},"\n";
	if(not $digest eq $file_info{"md5"}){
	    $fvn_config{"files"}->{$file}->{"md5"} = $digest;
	    if( $file_info{"action"} eq "none" ){
		$fvn_config{"files"}->{$file}->{"action"} = "change";
		$file_info{"action"} = "change";
	    }
	}
	
	#print "$digest === ",$file_info{"md5"}," ";

	if($file_info{"action"} eq "none"){
	    #print "$file unchange\n";
	    $unchange += 1;
	}elsif($file_info{"action"} eq "add"){
	    print "$file add\n";
	    $add += 1;
	}elsif($file_info{"action"} eq "del"){
	    print "$file del\n";
	    $del += 1;
	}elsif($file_info{"action"} eq "change"){
	    print "$file change\n";
	    $change += 1;
	}
    }

    if( $change == 0 and $add == 0 and $del == 0 ){
	die "no change need commit\n";
    }

    $fvn_config{"version_local"} += 1;    
    print "server version:$fvn_config{'version_server'}\n";
    print "local version:$fvn_config{'version_local'}\n";
    print "add:$add ";
    print "del:$del ";
    print "change:$change ";
    print "unchange:$unchange\n";

}

sub fvn_push
{
    my %files = %{$fvn_config{"files"}};
    foreach my $file (keys %files){
	my %file_info = %{$fvn_config{"files"}->{$file}};

	if($file_info{"action"} eq "add"){
	    put_file($file);
	}elsif($file_info{"action"} eq "del"){
	    put_file($file);
	}elsif($file_info{"action"} eq "change"){
	    put_file($file);
	}elsif($file_info{"action"} eq "none"){
	}
	$fvn_config{"files"}->{$file}->{"action"} = "none";
    }

    $fvn_config{"version_server"} += 1;
    fvn_save_config(".config");
    put_file(".config");
    print "push success\n";
}

sub fvn_sync
{
    my %files = %{$fvn_config{"files"}};
    foreach my $file (keys %files){
	my %file_info = %{$fvn_config{"files"}->{$file}};

	put_file($file);
	$fvn_config{"files"}->{$file}->{"action"} = "none";
    }

    $fvn_config{"version_server"} += 1;
    fvn_save_config(".config");
    put_file(".config");
    print "push success\n";

}

sub fvn_pull
{
    print "currently not support\n";
}

sub put_file
{
    my ($file) = @_;
    $file =~ s/\/\//\//g;
    system("./light_ftp --put --user ".$fvn_config{"usr"}.
	   " --password ".$fvn_config{"pwd"}.
	   " --local-file ".$file.
	   " --remote-file ".$file.
	   " --url ".$fvn_config{"root"});
}
